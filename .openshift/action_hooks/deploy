#!/bin/bash

# wordpress
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

dest_dir=${OPENSHIFT_DATA_DIR}current

current_version=$(cat ${OPENSHIFT_BUILD_DEPENDENCIES_DIR}.current_version)
install_dir=${OPENSHIFT_BUILD_DEPENDENCIES_DIR}${current_version}

if [ ! -d "${dest_dir}" ]; then
  mkdir -p $dest_dir
  cp -rf ${install_dir}/* ${dest_dir}/
fi

# Replace the php/ directory with provided clean Wordpress installation
#
if [ -d ${OPENSHIFT_REPO_DIR}php ]; then
  rm -rf ${OPENSHIFT_REPO_DIR}php
fi
ln -sf ${dest_dir} ${OPENSHIFT_REPO_DIR}php

if [ ! -d ${OPENSHIFT_DATA_DIR}uploads ]; then
    mkdir ${OPENSHIFT_DATA_DIR}uploads
fi


# If this is initial installation, copy the default themes and plugins
# from official Wordpress installation
#
if [ ! -d ${OPENSHIFT_DATA_DIR}plugins ]; then
  mv ${dest_dir}/wp-content/plugins ${OPENSHIFT_DATA_DIR}plugins
fi

if [ ! -d ${OPENSHIFT_DATA_DIR}themes ]; then
  mv ${dest_dir}/wp-content/themes ${OPENSHIFT_DATA_DIR}themes
fi

# Users can place their own plugins and themes into .openshift/ directory
# inside their GIT repository.
#
echo "Copying WordPress plugins from .openshift/plugins"
cp -rf $OPENSHIFT_REPO_DIR/.openshift/plugins/* ${OPENSHIFT_DATA_DIR}plugins/ 2>/dev/null

echo "Copying WordPress themes from .openshift/themes"
cp -rf $OPENSHIFT_REPO_DIR/.openshift/themes/* ${OPENSHIFT_DATA_DIR}themes/ 2>/dev/null

# Add multisite upload dir
#
if [ ! -d $OPENSHIFT_DATA_DIR/blogs.dir ]; then
    mkdir $OPENSHIFT_DATA_DIR/blogs.dir
fi

ln -sf ${OPENSHIFT_DATA_DIR}blogs.dir ${OPENSHIFT_REPO_DIR}php/wp-content/
ln -sf ${OPENSHIFT_DATA_DIR}plugins   ${OPENSHIFT_REPO_DIR}php/wp-content/
ln -sf ${OPENSHIFT_DATA_DIR}themes    ${OPENSHIFT_REPO_DIR}php/wp-content/
ln -sf ${OPENSHIFT_DATA_DIR}uploads   ${OPENSHIFT_REPO_DIR}php/wp-content/

set -e

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]
then
    echo 1>&2
    echo "Could not find mysql database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c mysql-5.1" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
fi

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]
then
    exit 5
fi

# Confirm database exists, if not create it
if ! /usr/bin/mysql -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" -e "select * from wp_commentmeta;" "$OPENSHIFT_APP_NAME" > /dev/null 2>&1
then
    echo
    echo "Database schema not yet added, WordPress is ready for install by visiting the site."
else
    echo "Database already configured."
fi


# etherpad
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.
#cp -v $OPENSHIFT_REPO_DIR/.openshift/mongodb_db.js $OPENSHIFT_REPO_DIR/node_modules/ueberDB/

#settingsfile=$OPENSHIFT_REPO_DIR/settings.json

#sed -i 's/OPENSHIFT_NODEJS_IP/'$OPENSHIFT_NODEJS_IP'/' $settingsfile
#sed -i 's/OPENSHIFT_NODEJS_PORT/'$OPENSHIFT_NODEJS_PORT'/' $settingsfile
#sed -i 's/OPENSHIFT_MONGODB_DB_USERNAME/'$OPENSHIFT_MONGODB_DB_USERNAME'/' $settingsfile
#sed -i 's/OPENSHIFT_MONGODB_DB_HOST/'$OPENSHIFT_MONGODB_DB_HOST'/' $settingsfile
#sed -i 's/OPENSHIFT_MONGODB_DB_PORT/'$OPENSHIFT_MONGODB_DB_PORT'/' $settingsfile
#sed -i 's/OPENSHIFT_MONGODB_DB_PASSWORD/'$OPENSHIFT_MONGODB_DB_PASSWORD'/' $settingsfile
#sed -i 's/OPENSHIFT_APP_NAME/'$OPENSHIFT_APP_NAME'/' $settingsfile

# Set up the symbolic links needed for etherpad to work
pushd $OPENSHIFT_REPO_DIR
if [[ -f ./server.js ]]
then
  rm server.js
fi
ln -s node/server.js .
popd

pushd $OPENSHIFT_REPO_DIR/static/js
for i in ./*
do
  renamed=$(echo $i | sed 's/.js$//g')
  ln -s $i $renamed
done
popd

